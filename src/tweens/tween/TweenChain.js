/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2022 Photon Storm Ltd.
 * @license      {@link https://opensource.org/licenses/MIT|MIT License}
 */

var Class = require('../../utils/Class');
var Events = require('../events');
var TWEEN_CONST = require('./const');

/**
 * @classdesc
 * TODO
 *
 * @class TweenChain
 * @memberof Phaser.Tweens
 * @constructor
 * @since 3.60.0
 *
 * @param {Phaser.Tweens.TweenManager} manager - A reference to the TweenManager this TweenChain belongs to.
 */
var TweenChain = new Class({

    initialize:

    function TweenChain (manager)
    {
        /**
         * A reference to the TweenManager that this TweenChain instance belongs to.
         *
         * @name Phaser.Tweens.TweenData#manager
         * @type {Phaser.Tweens.TweenManager}
         * @since 3.60.0
         */
        this.manager = manager;

        //  The tweens
        this.data = [];

        this.currentTween = null;

        this.state = 0;

        this.paused = false;

        /**
         * The time, in milliseconds, before this tween will start playing.
         *
         * This value is generated by the `getDelay` function.
         *
         * @name Phaser.Tweens.TweenData#delay
         * @type {number}
         * @since 3.60.0
         */
        this.delay = 0;

        /**
         * Will the Tween ease back to its starting values, after reaching the end
         * and any `hold` value that may be set?
         *
         * @name Phaser.Tweens.TweenData#yoyo
         * @type {boolean}
         * @since 3.60.0
         */
        this.yoyo = false;

        /**
         * The time, in milliseconds, before this tween will start a yoyo to repeat.
         *
         * @name Phaser.Tweens.TweenData#hold
         * @type {number}
         * @since 3.60.0
         */
        this.hold = 0;

        /**
         * The number of times this tween will repeat.
         *
         * The tween will always run once regardless of this value,
         * so a repeat value of '1' will play the tween twice: I.e. the original
         * play-through and then it repeats that once (1).
         *
         * If this value is set to -1 this tween will repeat forever.
         *
         * @name Phaser.Tweens.TweenData#repeat
         * @type {number}
         * @since 3.60.0
         */
        this.repeat = 0;

        /**
         * The time, in milliseconds, before the repeat will start.
         *
         * @name Phaser.Tweens.TweenData#repeatDelay
         * @type {number}
         * @since 3.60.0
         */
        this.repeatDelay = 0;

        /**
         * How many repeats are left to run?
         *
         * @name Phaser.Tweens.TweenData#repeatCounter
         * @type {number}
         * @since 3.60.0
         */
        this.repeatCounter = 0;

        /**
         * Is this Tween Data currently waiting for a countdown to elapse, or not?
         *
         * @name Phaser.Tweens.TweenData#isCountdown
         * @type {boolean}
         * @since 3.60.0
         */
        this.isCountdown = false;
    },

    init: function ()
    {

    },

    /**
     * Create a sequence of Tweens, chained to one-another, and add them to this Tween Manager.
     *
     * The tweens are played in order, from start to finish. You can optionally set the chain
     * to repeat as many times as you like. Once the chain has finished playing, or repeating if set,
     * all tweens in the chain will be destroyed automatically. To override this, set the 'persists'
     * argument to 'true'.
     *
     * Playback will start immediately unless the _first_ Tween has been configured to be paused.
     *
     * Please note that Tweens will not manipulate any target property that begins with an underscore.
     *
     * @method Phaser.Tweens.TweenManager#add
     * @since 3.60.0
     *
     * @param {Phaser.Types.Tweens.TweenBuilderConfig[]|object[]} tweens - An array of Tween configuration objects for the Tweens in this chain.
     *
     * @return {Phaser.Tweens.TweenChain} This TweenChain instance.
     */
    add: function (tween)
    {

    },

    play: function ()
    {

    },

    pause: function ()
    {

    },

    resume: function ()
    {

    },

    /**
     * Immediately destroys this TweenChain, nulling of all its references.
     *
     * @method Phaser.Tweens.TweenChain#destroy
     * @since 3.60.0
     */
    destroy: function ()
    {
    }

});

module.exports = TweenChain;
